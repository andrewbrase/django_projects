The command - python manage.py diffsettings 
- displays differences between the current settings file and Django’s default settings.
(activate myDjangoEnv)

AUTH_PASSWORD_VALIDATORS = [{'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'}, {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'}, {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'}, {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}]
BASE_DIR = 'C:\\Users\\brasea\\Desktop\\Workspace\\django_projects\\django_projects\\05_inserting_static_media\\static_media_project'  ###
DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'USER': '', 'OPTIONS': {}, 'ATOMIC_REQUESTS': False, 'AUTOCOMMIT': True, 'TIME_ZONE': None, 'PASSWORD': '', 'HOST': '', 'NAME': 'C:\\Users\\brasea\\Desktop\\Workspace\\django_projects\\django_projects\\05_inserting_static_media\\static_media_project\\db.sqlite3', 'TEST': {'CHARSET': None, 'COLLATION': None, 'MIRROR': None, 'NAME': None}, 'PORT': '', 'CONN_MAX_AGE': 0}}
DEBUG = True
INSTALLED_APPS = ['django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'static_media_app']
MIDDLEWARE = ['django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware']
ROOT_URLCONF = 'static_media_project.urls'  ###
SECRET_KEY = '$+*1(&v9z*xc&4)1*$_6&e#$22d0*eug)l@*ff%u_ckk07f^34'
SETTINGS_MODULE = 'static_media_project.settings'  ###
STATICFILES_DIRS = ['C:\\Users\\brasea\\Desktop\\Workspace\\django_projects\\django_projects\\05_inserting_static_media\\static_media_project\\static']
STATIC_DIR = 'C:\\Users\\brasea\\Desktop\\Workspace\\django_projects\\django_projects\\05_inserting_static_media\\static_media_project\\static'  ###
STATIC_URL = '/static/'
TEMPLATE = 1  ###
TEMPLATES = [{'DIRS': ['C:\\Users\\brasea\\Desktop\\Workspace\\django_projects\\django_projects\\05_inserting_static_media\\static_media_project\\templates'], 'OPTIONS': {'context_processors': ['django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages']}, 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'APP_DIRS': True}]
TEMPLATE_DIR = 'C:\\Users\\brasea\\Desktop\\Workspace\\django_projects\\django_projects\\05_inserting_static_media\\static_media_project\\templates'  ###
TIME_ZONE = 'UTC'
USE_L10N = True
USE_TZ = True
WSGI_APPLICATION = 'static_media_project.wsgi.application'

So far we’ve used templates to insert
simple text.
● But we don’t always just want text, what
about other types of media, for example,
returning a User’s Photo?
● Let’s discuss static media files!

To do this, we will create a new directory
inside of the project called static ( just like
we did for templates)
● Then we will add this directory path to the
project’s settings.py file
● We will also add a STATIC_URL variable

Once we’ve done that we need a place to
store our static image files
● We create a directory inside of static
called images
● Place a favorite .jpg file inside this images
directory (or just download one)

continue with the templates lecture for more info,
forgot to finish the notes for this section

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
working with models

from django.db import models

class Topic(models.Model):
    top_name = models.CharField(max_length=20, unique=True)

    def __str__(self):
        return self.top_name

class Webpage(models.Model):
    topic = models.ForeignKey(Topic, on_delete=models.CASCADE)
    name = models.CharField(max_length=20, unique=True)
    url = models.URLField(unique=True)

    def __str__(self):
        return self.name

class AccessRecord(models.Model):
    name = models.ForeignKey(Webpage, on_delete=models.CASCADE)
    date = models.DateField()

    def __str__(self):
        return str(self.date)

>python manage.py migrate
>python manage.py makemigrations static_media_app
>python manage.py migrate

After you define the models, 
Django will build out the SQL 
database through a series of 
commands

(activate the env)
in that project folder call 
> python manage.py migrate
> python manage.py makemigrations static_media_app
> python manage.py migrate

now our models should be connected to 
a SQL database that Django has made for us
and registered the changes to our app

how to look at that database - 
create some test data with some shell commands
using python at the shell we can interact with
our database

> python manage.py shell
this will open up an interactive shell

>>> from static_media_app.models import Topic
>>> print(Topic.objects.all())
<QuerySet []>
>>>

you'll get nothing back from the first time,
lets create something

(making a new Topic)
>>> t = Topic(top_name="Social Network")
>>> t.save()
( .save() is inherited from the model.Models class)

if we try to print out all of the topic objects we now get this
>>> print(Topic.objects.all())
<QuerySet [<Topic: Social Network>]>
>>>
>>> quit()

so far we've created models and the database behind it
we actually used shell commands to add something
we're not going to be using the shell everytime we want to add, view the database
in order to have more convieneance we'll use the admin interface

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
130. Models-Templates-Views Paradigm

Django operates on what is known as Models-Templates-Views (MTV)
(MTV) encompasses the idea of how to connect everything we've talked
about so far: models, templates, and views

- There are a few basic steps to achieving
the goal of serving dynamic conetnt to a 
user based off the connect of the models, views and templates.

First: In the views.py file we import any models that we will need to use
Second: Use the view to query the model for data that we will need 
Third: Pass resuls from the model into the template
Fourth: Edit the template so that it is ready to accept and display the data from the model
Fifth: Map a URL to the view

add
from static_media_app.models import Topic, Webpage, AccessRecord
to static_media_app.views
130. 3:00